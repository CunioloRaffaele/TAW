generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model aircrafts {
  id             Int       @id @default(autoincrement())
  model          String?   @default("Boeing 747") @db.VarChar(100)
  seats_capacity Int?      @default(120)
  owner_name     String    @db.VarChar(255)
  airlines       airlines  @relation(fields: [owner_name], references: [name], onDelete: Cascade)
  flights        flights[]
  seats          seats[]
}

model airlines {
  name      String      @id @db.VarChar(255)
  password  String      @db.VarChar(255)
  country   String      @db.VarChar(100)
  motto     String?     @default("Fly with us, fly safe and snug <3") @db.VarChar(300)
  enrolled  Boolean?    @default(false)
  aircrafts aircrafts[]
  uses      uses[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model airports {
  id                                  Int      @id @default(autoincrement())
  name                                String   @db.VarChar(100)
  city                                String   @db.VarChar(255)
  country                             String   @db.VarChar(100)
  lat                                 Float
  lan                                 Float
  time_zone                           Int
  routes_routes_departureToairports   routes[] @relation("routes_departureToairports")
  routes_routes_destinationToairports routes[] @relation("routes_destinationToairports")
}

model bookings {
  id          Int      @id @default(autoincrement())
  ticket_code String?  @db.Uuid
  seat_id     Int?
  trip_id     Int?
  extras_id   Int?
  extras      extras?  @relation(fields: [extras_id], references: [id])
  seats       seats?   @relation(fields: [seat_id], references: [id])
  tickets     tickets? @relation(fields: [ticket_code], references: [code])
  trips       trips?   @relation(fields: [trip_id], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model extras {
  id          Int        @id @default(autoincrement())
  description String     @db.VarChar(255)
  price       Float?
  bookings    bookings[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model flights {
  code              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  duration          Int?
  aircraft_id       Int?
  liftoff_date      DateTime?  @db.Date
  route_departure   Int?
  route_destination Int?
  aircrafts         aircrafts? @relation(fields: [aircraft_id], references: [id])
  routes            routes?    @relation(fields: [route_departure, route_destination], references: [departure, destination])
  tickets           tickets[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model routes {
  departure                             Int
  destination                           Int
  flights                               flights[]
  airports_routes_departureToairports   airports  @relation("routes_departureToairports", fields: [departure], references: [id], onDelete: NoAction)
  airports_routes_destinationToairports airports  @relation("routes_destinationToairports", fields: [destination], references: [id], onDelete: NoAction)
  uses                                  uses[]

  @@id([departure, destination])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model seats {
  id          Int        @id @default(autoincrement())
  postion     String?    @db.VarChar(4)
  aircraft_id Int?
  bookings    bookings[]
  aircrafts   aircrafts? @relation(fields: [aircraft_id], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tickets {
  code       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String?    @db.VarChar(50)
  price      Float?
  fligt_code String?    @db.Uuid
  bookings   bookings[]
  flights    flights?   @relation(fields: [fligt_code], references: [code], onDelete: Cascade)
}

model trips {
  id            Int        @id @default(autoincrement())
  creation_date DateTime?  @db.Date
  user_id       Int?
  bookings      bookings[]
  users         users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  email    String  @unique @db.VarChar(255)
  password String  @db.VarChar(255)
  role     Int?    @default(0)
  trips    trips[]
}

model uses {
  id                Int       @id @default(autoincrement())
  airline_name      String?   @db.VarChar(255)
  route_departure   Int?
  route_destination Int?
  airlines          airlines? @relation(fields: [airline_name], references: [name], onDelete: Cascade)
  routes            routes?   @relation(fields: [route_departure, route_destination], references: [departure, destination], onDelete: Cascade)
}

model bljwts {
  id  Int    @id @default(autoincrement())
  jwt String @db.VarChar(255)
}
